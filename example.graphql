type MessageCampaign implements Base_ & MessageOwn_ {
    y: Int
    label: String
    name: String
}

type PostCampaign implements Base_ & Node_ {
    y: Int
    label: String
    posts: [Posts]
    x: Int
    name: String
}

union Campaign = PostCampaign | MessageCampaign

type Object {
    aCiao: Int
    sdf: Int
    bCom: String
}

type E {
    x: String
}

type D {
    x: String
}

type C {
    x: String
}

type B {
    x: String
}

type A {
    x: String
}

union X = A | B | C | D | E

type GenericEdge {
    cose: X
}

type GenericEdge {
    type: Type
    amount: Int
}

type Posts {
    name: String
    url: String
}

enum Type {
    followers
    following
    likers
    feed
    stories
    hashtags
    geotag
    author
}

scalar Json

interface Base_ {
    y: Int
    label: String
}

interface Node_ {
    name: String
}

interface MessageOwn_ {
    name: String
}