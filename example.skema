#!/usr/bin/env skema-gen python typescript graphql jsonschema



Object:
    aCiao?: Int
    sdf?: Int
    bCom: Str


Campaign: PostCampaign | MessageCampaign

Base:
    x: Int
    y: Int
    label: Str

Node:
    name: Str

# & can work with inline properties
# in the tree representation this gets
# in jsonschema properties gets merged before output, leaving a plain PostCampaign: {type: object, ...}
#Â in grapgql this will be represented as single type that implemetns Base, Node
# in python types this will be simply

PostCampaign: Base & Node &
    posts: [
        name: Str
        url: Str
    ]
    x: Int

MessageCampaign: Base & MessageOwn

MessageOwn: 
    name: Str




