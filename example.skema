#!/usr/bin/env skema-gen python typescript graphql jsonschema

Root:
    x: GenericEdge

GenericEdge:
    type: "followers" | "following" | "likers" | "feed" | "stories" | "hashtags" | "geotag" | "author"
    amount?: Int

GenericEdge:
    cose: X

X: A | B | C | D | E
A:
    x: Str
B:
    x: Str
C:
    x: Str
D:
    x: Str
E:
    x: Str

Object:
    aCiao?: Int
    sdf?: Int
    bCom: Str

"""Descrizione Campaign"""
Campaign: PostCampaign | MessageCampaign

Base:
    y: Int
    label: Str

"""Descrizione Node"""
Node:
    """Descrizione name"""
    name: Str

# & can work with inline properties
# in the tree representation this gets
# in jsonschema properties gets merged before output, leaving a plain PostCampaign: {type: object, ...}
#Â in grapgql this will be represented as single type that implemetns Base, Node
# in python types this will be simply

"""Descrizione PostCampaign"""
PostCampaign: Base & Node &
    """Descrizione posts"""
    posts: [
        name: Str
        url: Str
    ]
    """Descrizione x"""
    x: Int

"""Descrizione MessageCampaign"""
MessageCampaign: Base & MessageOwn

"""
Descrizione MessageOwn
"""
MessageOwn: 
    name: Str





